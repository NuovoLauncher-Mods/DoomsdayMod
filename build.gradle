//Setting the version from an argument
if (project.hasProperty("projVersion")) {
  project.version = project.projVersion
} else {
  project.version = "1.0.0"
}


buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://jcenter.bintray.com/" }
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
    }
}

apply plugin: "forge"

group= "com.haxium.basicmod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "obsidian_armor"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile "com.mod-buildcraft:buildcraft:6.0.8:dev"  // adds buildcraft to the dev env
    //compile "com.googlecode.efficient-java-matrix-library:ejml:0.24" // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
                
        // replace version and mcversion
        expand "version":project.version, "mcversion":project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

//Custom tasks


task copy(dependsOn: build, type: Copy) {
     from "build/libs"
     into System.getProperty('user.home') + "/.minecraft/mods"
     include "obsidian_armor-$project.version*"
}

task copy_test(dependsOn: build, type: Copy) {
    from "build/libs"
    into System.getProperty('user.home') + "/Desktop/Minecraft Testing/mods"
    include "obsidian_armor-$project.version*"
}

task copy_release(type: Copy) {
    from "build/libs"
    into System.getProperty('user.home') + "/Desktop/Programming/Java/ObsidianArmor-Releases"
    include "obsidian_armor-$project.version*"
}

task update_release(type: Exec) {
    def update_command = ['update-release', '--obsidian', project.version]
    commandLine update_command
}

//Copy the release and push to github

copy_release.mustRunAfter copy 
copy.finalizedBy copy_release

update_release.mustRunAfter copy_release
copy_release.finalizedBy update_release